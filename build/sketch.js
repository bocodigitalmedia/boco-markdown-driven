// Generated by CoffeeScript 1.10.0
var Marked, Path, getCoffeeTokens, getCoffeeVars, getFileData, getMarkdownTokens, jasmineTokens, markdown, processMarkdown, sourcePath,
  slice = [].slice,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

Marked = require("marked");

getCoffeeTokens = function(code) {
  return require("coffee-script").tokens(code);
};

getCoffeeVars = function(code) {
  var tokens;
  tokens = getCoffeeTokens(code);
  tokens = tokens.filter(function(token) {
    return token[0] === "IDENTIFIER" && token.variable && token.spaced;
  });
  return tokens.map(function(arg) {
    var data, text, type;
    type = arg[0], text = arg[1], data = arg[2];
    return text;
  });
};

getFileData = function(path) {
  return require("fs").readFileSync(path).toString();
};

getMarkdownTokens = function() {
  var markdown, tokenInTypes, tokens, types;
  markdown = arguments[0], types = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  tokenInTypes = function(token) {
    var ref;
    return ref = token.type, indexOf.call(types, ref) >= 0;
  };
  tokens = require("marked").lexer(markdown);
  if (types.length) {
    tokens = tokens.filter(tokenInTypes);
  }
  return tokens;
};

processMarkdown = function(markdown) {
  var addDescribeCodeToken, addDescribeToken, addExampleCodeToken, addExampleToken, currentContext, currentDepth, jasmineTokens, markdownTokens, processCodeToken, processHeadingToken, processMarkdownTokens;
  jasmineTokens = [];
  currentContext = null;
  currentDepth = null;
  processHeadingToken = function(token) {
    currentDepth = token.depth;
    if (/^example/i.test(token.text)) {
      return addExampleToken(token);
    }
    return addDescribeToken(token);
  };
  addExampleToken = function(token) {
    currentContext = "example";
    return jasmineTokens.push({
      type: "example",
      depth: currentDepth,
      text: token.text
    });
  };
  addDescribeToken = function(token) {
    currentContext = "describe";
    return jasmineTokens.push({
      type: "describe",
      depth: currentDepth,
      text: token.text
    });
  };
  processCodeToken = function(token) {
    if (currentContext === "describe") {
      return addDescribeCodeToken(token);
    }
    if (currentContext === "example") {
      return addExampleCodeToken(token);
    }
  };
  addDescribeCodeToken = function(token) {
    var code, vars;
    code = token.text;
    vars = getCoffeeVars(code);
    return jasmineTokens.push({
      type: "describe.code",
      depth: currentDepth,
      vars: vars,
      code: code
    });
  };
  addExampleCodeToken = function(token) {
    var code, vars;
    code = token.text;
    vars = getCoffeeVars(code);
    return jasmineTokens.push({
      type: "example.code",
      depth: currentDepth,
      vars: vars,
      code: code
    });
  };
  processMarkdownTokens = function(tokens) {
    return tokens.forEach(function(token) {
      if (token.type === "heading") {
        return processHeadingToken(token);
      }
      if (token.type === "code") {
        return processCodeToken(token);
      }
    });
  };
  markdownTokens = getMarkdownTokens(markdown, "heading", "code");
  processMarkdownTokens(markdownTokens);
  return jasmineTokens;
};

Path = require("path");

sourcePath = Path.resolve(__dirname, "..", "docs", "math.coffee.md");

markdown = getFileData(sourcePath);

jasmineTokens = processMarkdown(markdown);

console.log(jasmineTokens);

process.exit(0);

//# sourceMappingURL=sketch.js.map
