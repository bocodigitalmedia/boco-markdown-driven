// Generated by CoffeeScript 1.10.0
var FileCompiler, GlobCompiler, MarkDownDriven, compiler,
  hasProp = {}.hasOwnProperty,
  slice = [].slice;

MarkDownDriven = require("./");

FileCompiler = (function() {
  FileCompiler.prototype.tokenizer = null;

  FileCompiler.prototype.converter = null;

  FileCompiler.prototype.parser = null;

  function FileCompiler(props) {
    var key, val;
    if (props == null) {
      props = {};
    }
    for (key in props) {
      if (!hasProp.call(props, key)) continue;
      val = props[key];
      this[key] = val;
    }
    if (this.tokenizer == null) {
      this.tokenizer = new MarkDownDriven.Tokenizer;
    }
    if (this.converter == null) {
      this.converter = new MarkDownDriven.JasmineConverter;
    }
    if (this.parser == null) {
      this.parser = new MarkDownDriven.JasmineCoffeeParser;
    }
  }

  FileCompiler.prototype.parse = function(markdown) {
    var tokens;
    tokens = this.tokenizer.tokenize(markdown);
    tokens = this.converter.convert(tokens);
    return this.parser.parse(tokens);
  };

  FileCompiler.prototype.readFile = function(path, done) {
    return require("fs").readFile(path, done);
  };

  FileCompiler.prototype.writeFile = function(path, data, done) {
    return require("fs").writeFile(path, data, done);
  };

  FileCompiler.prototype.compile = function(sourcePath, targetPath, done) {
    return this.readFile(sourcePath, (function(_this) {
      return function(error, data) {
        var compiled;
        if (error != null) {
          return done(error);
        }
        compiled = _this.parse(data.toString());
        return _this.writeFile(targetPath, compiled, done);
      };
    })(this));
  };

  return FileCompiler;

})();

GlobCompiler = (function() {
  function GlobCompiler(params) {
    var key, val;
    if (params == null) {
      params = {};
    }
    for (key in params) {
      if (!hasProp.call(params, key)) continue;
      val = params[key];
      this[key] = val;
    }
    if (this.cwd == null) {
      this.cwd = process.cwd();
    }
    if (this.fileCompiler == null) {
      this.fileCompiler = new FileCompiler;
    }
    if (this.sourceDir == null) {
      this.sourceDir = this.resolvePath(this.cwd, "docs");
    }
    if (this.targetDir == null) {
      this.targetDir = this.resolvePath(this.cwd, "spec");
    }
  }

  GlobCompiler.prototype.resolvePath = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = require("path")).resolve.apply(ref, args);
  };

  GlobCompiler.prototype.joinPath = function() {
    var args, ref;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return (ref = require("path")).join.apply(ref, args);
  };

  GlobCompiler.prototype.eachSeries = function(series, fn, done) {
    return require("async").eachSeries(series, fn, done);
  };

  GlobCompiler.prototype.getTargetName = function(sourceName) {
    return sourceName.replace(/((\.coffee)?\.md|\.litcoffee)$/, "-spec.coffee");
  };

  GlobCompiler.prototype.compileSourceName = function(sourceName, done) {
    var sourcePath, targetName, targetPath;
    targetName = this.getTargetName(sourceName);
    sourcePath = this.joinPath(this.sourceDir, sourceName);
    targetPath = this.joinPath(this.targetDir, targetName);
    return this.fileCompiler.compile(sourcePath, targetPath, done);
  };

  GlobCompiler.prototype.glob = function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return require("glob").apply(null, args);
  };

  GlobCompiler.prototype.compile = function(pattern, done) {
    if (pattern == null) {
      pattern = "**/*.?(md|litcoffee)";
    }
    return this.glob(pattern, {
      cwd: this.sourceDir
    }, (function(_this) {
      return function(error, sourceNames) {
        if (error) {
          return done(error);
        }
        return _this.eachSeries(sourceNames, _this.compileSourceName.bind(_this), done);
      };
    })(this));
  };

  return GlobCompiler;

})();

compiler = new GlobCompiler;

compiler.compile("**/*.?(md|litcoffee)", function(error) {
  if (error != null) {
    throw error;
  }
});

//# sourceMappingURL=sketch.js.map
