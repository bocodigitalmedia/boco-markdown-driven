// Generated by CoffeeScript 1.10.0
var configure,
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

configure = function($) {
  var CoffeeService, CoffeeToken, JasmineCoffee, JasmineCoffeeCompiler, Snippets;
  if ($ == null) {
    $ = {};
  }
  if ($.reduceUnique == null) {
    $.reduceUnique = function(arr, v) {
      if (arr.indexOf(v) === -1) {
        arr.push(v);
      }
      return arr;
    };
  }
  if ($.globalVariables == null) {
    $.globalVariables = ["require", "jasmine"];
  }
  Snippets = (function() {
    Snippets.prototype.snippets = null;

    Snippets.prototype.indentationString = null;

    function Snippets(props) {
      var key, val;
      if (props == null) {
        props = {};
      }
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.snippets == null) {
        this.snippets = [];
      }
      if (this.indentationString == null) {
        this.indentationString = "  ";
      }
    }

    Snippets.prototype.indent = function(code, depth) {
      var i, indentation, results;
      indentation = (function() {
        results = [];
        for (var i = 0; 0 <= depth ? i < depth : i > depth; 0 <= depth ? i++ : i--){ results.push(i); }
        return results;
      }).apply(this).map((function(_this) {
        return function() {
          return _this.indentationString;
        };
      })(this)).join('');
      return code.replace(/^/gm, indentation);
    };

    Snippets.prototype.add = function(code, depth) {
      if (depth == null) {
        depth = 0;
      }
      return this.snippets.push(this.indent(code, depth));
    };

    Snippets.prototype.compile = function(joinStr) {
      if (joinStr == null) {
        joinStr = "\n\n";
      }
      return this.snippets.join(joinStr) + "\n";
    };

    return Snippets;

  })();
  CoffeeToken = (function() {
    CoffeeToken.prototype.type = null;

    CoffeeToken.prototype.value = null;

    CoffeeToken.prototype.variable = null;

    CoffeeToken.prototype.firstLine = null;

    CoffeeToken.prototype.firstColumn = null;

    CoffeeToken.prototype.lastLine = null;

    CoffeeToken.prototype.lastColumn = null;

    function CoffeeToken(props) {
      var key, val;
      if (props == null) {
        props = {};
      }
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
    }

    CoffeeToken.isVariable = function(token) {
      return token.type === "IDENTIFIER" && token.variable;
    };

    CoffeeToken.getValue = function(token) {
      return token.value;
    };

    CoffeeToken.convert = function(csToken) {
      return new CoffeeToken({
        type: csToken[0],
        value: csToken[1],
        variable: csToken.variable
      });
    };

    return CoffeeToken;

  })();
  CoffeeService = (function() {
    CoffeeService.prototype.globalVariables = null;

    function CoffeeService(props) {
      var key, val;
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.globalVariables == null) {
        this.globalVariables = $.globalVariables;
      }
    }

    CoffeeService.prototype.tokenize = function(code) {
      return require('coffee-script').tokens(code).map(CoffeeToken.convert);
    };

    CoffeeService.prototype.getVariableNames = function(code) {
      var names, tokens;
      tokens = this.tokenize(code).filter(CoffeeToken.isVariable);
      names = tokens.map(CoffeeToken.getValue);
      return names.reduce($.reduceUnique, []);
    };

    CoffeeService.prototype.isGlobalVariable = function(v) {
      return indexOf.call(this.globalVariables, v) >= 0;
    };

    return CoffeeService;

  })();
  JasmineCoffeeCompiler = (function() {
    JasmineCoffeeCompiler.prototype.coffeeService = null;

    function JasmineCoffeeCompiler(props) {
      var key, val;
      if (props == null) {
        props = {};
      }
      for (key in props) {
        if (!hasProp.call(props, key)) continue;
        val = props[key];
        this[key] = val;
      }
      if (this.coffeeService == null) {
        this.coffeeService = new CoffeeService;
      }
    }

    JasmineCoffeeCompiler.prototype.getContextVariableNames = function(node) {
      var ancestorVars, ancestors, beforeEachNodes, code, reduceAncestorVars, vars;
      beforeEachNodes = node.getBeforeEachNodes();
      code = beforeEachNodes.map(function(arg) {
        var code;
        code = arg.code;
        return code;
      }).join("\n");
      vars = this.coffeeService.getVariableNames(code);
      if ((ancestors = node.getAncestorContexts()) != null) {
        reduceAncestorVars = (function(_this) {
          return function(vars, ancestor) {
            return vars.concat(_this.getContextVariableNames(ancestor));
          };
        })(this);
        ancestorVars = ancestors.reduce(reduceAncestorVars, []);
        vars = vars.filter(function(v) {
          return ancestorVars.indexOf(v) === -1;
        });
      }
      return vars.filter((function(_this) {
        return function(v) {
          return !_this.coffeeService.isGlobalVariable(v);
        };
      })(this));
    };

    JasmineCoffeeCompiler.prototype.compileFileNodes = function(snippets, nodes) {
      var depth, mockFsObject, mockFsString;
      if (!nodes.length) {
        return snippets;
      }
      depth = nodes[0].depth;
      mockFsObject = nodes.reduce((function(memo, arg) {
        var data, path;
        path = arg.path, data = arg.data;
        return memo[path] = data;
      }), {});
      mockFsString = JSON.stringify(mockFsObject, null, 2);
      snippets.add("beforeEach ->", depth);
      snippets.add("mockFsObject = " + mockFsString, depth + 1);
      snippets.add("require('mock-fs')(mockFsObject)", depth + 1);
      snippets.add("afterEach ->", depth);
      snippets.add("require('mock-fs').restore()", depth + 1);
      return snippets;
    };

    JasmineCoffeeCompiler.prototype.compileBeforeEachNodes = function(snippets, nodes) {
      var code, depth;
      if (!nodes.length) {
        return snippets;
      }
      depth = nodes[0].depth;
      code = nodes.map(function(arg) {
        var code;
        code = arg.code;
        return code;
      }).join("\n");
      snippets.add("beforeEach ->", depth);
      snippets.add(code, depth + 1);
      return snippets;
    };

    JasmineCoffeeCompiler.prototype.compileAssertionNode = function(snippets, node) {
      var code, depth, text;
      depth = node.depth, text = node.text, code = node.code;
      snippets.add("it " + (JSON.stringify(text)) + " ->", depth);
      snippets.add(code, depth + 1);
      return snippets;
    };

    JasmineCoffeeCompiler.prototype.compileAssertionNodes = function(snippets, nodes) {
      if (!nodes.length) {
        return snippets;
      }
      return nodes.reduce(this.compileAssertionNode.bind(this), snippets);
    };

    JasmineCoffeeCompiler.prototype.compileContextNode = function(snippets, node) {
      var vars;
      vars = this.getContextVariableNames(node);
      snippets.add("describe " + (JSON.stringify(node.text)) + " ->", node.depth);
      if (vars.length) {
        snippets.add("[" + (vars.join(', ')) + "] = []", node.depth + 1);
      }
      snippets = this.compileBeforeEachNodes(snippets, node.getBeforeEachNodes());
      snippets = this.compileFileNodes(snippets, node.getFileNodes());
      snippets = this.compileAssertionNodes(snippets, node.getAssertionNodes());
      snippets = this.compileContextNodes(snippets, node.getContextNodes());
      return snippets;
    };

    JasmineCoffeeCompiler.prototype.compileContextNodes = function(snippets, nodes) {
      if (!nodes.length) {
        return snippets;
      }
      return nodes.reduce(this.compileContextNode.bind(this), snippets);
    };

    JasmineCoffeeCompiler.prototype.compile = function(rootNode) {
      var snippets;
      snippets = this.compileContextNodes(new Snippets(), rootNode.getContextNodes());
      return snippets.compile();
    };

    return JasmineCoffeeCompiler;

  })();
  return JasmineCoffee = {
    configuration: $,
    configure: configure,
    JasmineCoffeeCompiler: JasmineCoffeeCompiler,
    CoffeeService: CoffeeService,
    CoffeeToken: CoffeeToken,
    Snippets: Snippets
  };
};

module.exports = configure();

//# sourceMappingURL=index.js.map
